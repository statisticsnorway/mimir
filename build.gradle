plugins {
    id 'com.moowork.node' version '1.3.1'
    id 'com.enonic.xp.app' version '2.0.0'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

apply from: "react4xp.gradle"

dependencies {
    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-common:${xpVersion}"
    include "com.enonic.lib:lib-util:2.2.1"
    include "com.enonic.xp:lib-task:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.lib:lib-http-client:2.0.0"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-cron:1.0.0"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include 'com.enonic.lib:lib-cache:1.1.0'
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-repo:${xpVersion}"
    testCompile "com.enonic.xp:testing:${xpVersion}"
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}

task clientJsWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.clientjs.config.js', '--color', '--hide-modules' ]
    description = 'Build client-side js.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/assets/js'
    outputs.file "${buildDir}/resources/main/assets/js/bundle.js"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task clientTsWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.clientts.config.js', '--color', '--hide-modules' ]
    description = 'Build client-side ts.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/assets/ts'
    outputs.file "${buildDir}/resources/main/assets/ts/bundle.js"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task stylesWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.styles.config.js', '--color', '--hide-modules' ]
    description = 'Build client-side css.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/assets/styles'
    outputs.file "${buildDir}/resources/main/assets/styles/bundle.css"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task serverWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.server.config.js', '--color', '--hide-modules' ]
    description = 'Build server JS.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/lib'
    inputs.dir 'src/main/resources/services'
    inputs.dir 'src/main/resources/site'
    inputs.dir 'src/main/resources/admin'
    inputs.file 'src/main/resources/main.es6'
    outputs.dir "${buildDir}/resources/main/lib"
    outputs.dir "${buildDir}/resources/main/services"
    outputs.dir "${buildDir}/resources/main/site"
    outputs.dir "${buildDir}/resources/main/admin"
    outputs.file "${buildDir}/resources/main/main.js"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task testWebpack( type: NodeTask, dependsOn: npmInstall) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.test.config.js', '--color', '--hide-modules' ]
    description = 'Build test JS.'
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

task generateTypeScriptInterfaces( type: NodeTask, dependsOn: npmInstall ) {
    description = 'Generate TypeScript interfaces'
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--project', '.', '--write-to-file' ]
    script = file( 'node_modules/enonic-ts-codegen/bin/index.js' )
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'

    serverWebpack.dependsOn += 'config_tasks' // 'webpack_react4xp'
    serverWebpack.dependsOn += generateTypeScriptInterfaces

    dependsOn += npmInstall
    dependsOn += clientJsWebpack
    dependsOn += clientTsWebpack
    dependsOn += stylesWebpack
    dependsOn += serverWebpack
    dependsOn += testWebpack
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

