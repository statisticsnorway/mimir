import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id("com.github.node-gradle.node") version "4.0.0"
    id 'com.enonic.xp.app' version '3.2.0'
    id 'no.item.xp.codegen' version '2.2.2'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"}

dependencies {
    include "com.enonic.lib:lib-thymeleaf:2.0.2"
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-common:${xpVersion}"
    include "com.enonic.lib:lib-util:2.2.1"
    include "com.enonic.xp:lib-task:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.lib:lib-http-client:3.2.2"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-cron:1.1.2"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include 'com.enonic.lib:lib-cache:2.2.0'
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-repo:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.xp:lib-cluster:${xpVersion}"
    include "com.enonic.xp:lib-mail:${xpVersion}"
    include "com.enonic.xp:lib-scheduler:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    implementation 'commons-codec:commons-codec:1.15'
    include "no.item:wsutil-server:2.0.0"
    include "com.gravitondigital:featuretogglelib:0.3.0"
    include 'org.json:json:20230227'
    include 'com.enonic.lib:lib-react4xp:3.4.1'
    include 'com.enonic.lib:lib-text-encoding:2.1.1'
    include "com.enonic.xp:lib-value:${xpVersion}"
    include "no.item:lib-xp-cristin:1.3.1"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        url 'https://jitpack.io'
    }
}

node {
    download = true
    version = '16.4.2'
}

def react4xpGradlePath = 'node_modules/@enonic/react4xp/react4xp.gradle'
def react4xpGradleFile = new File(react4xpGradlePath)
if (!react4xpGradleFile.exists()) {
    exec {
        String npm = 'npm'
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            npm = 'npm.cmd'
        }
        commandLine npm
        args = ['install']
        println "\nNot found: $react4xpGradlePath - running shell command: $npm install"
        //store the output instead of printing to the console:
        standardOutput = new ByteArrayOutputStream()

        //extension method execSomething.output() can be used to obtain the output:
        ext.output = {
            return standardOutput.toString()
        }
    }
}
apply from: react4xpGradlePath
apply from: 'node_modules/@enonic/react4xp/npmInstall.gradle'
apply from: 'node_modules/@enonic/react4xp/updaters.gradle'

task clientJsWebpack( type: NpxTask, dependsOn: npmInstall ) {
    command =  'webpack'
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.clientjs.config.js', '--color' ]
    description = 'Build client-side js.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/assets/js'
    outputs.file "${buildDir}/resources/main/assets/js/bundle.js"
}

task clientTsWebpack( type: NpxTask, dependsOn: npmInstall ) {
    command  =  'webpack'
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.clientts.config.js', '--color' ]
    description = 'Build client-side ts.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/assets/ts'
    outputs.file "${buildDir}/resources/main/assets/ts/bundle.js"
}

task stylesWebpack( type: NpxTask, dependsOn: npmInstall ) {
    command  =  'webpack'
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.styles.config.js', '--color' ]
    description = 'Build client-side css.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/assets/styles'
    outputs.file "${buildDir}/resources/main/assets/styles/bundle.css"
}

task serverWebpack( type: NpxTask, dependsOn: npmInstall ) {
    command  =  'webpack'
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.server.config.js', '--color']
    description = 'Build server JS.'
    outputs.cacheIf { true }
    inputs.dir 'src/main/resources/tasks'
    inputs.dir 'src/main/resources/lib'
    inputs.dir 'src/main/resources/services'
    inputs.dir 'src/main/resources/site'
    inputs.dir 'src/main/resources/admin'
    inputs.file 'src/main/resources/main.es6'
    outputs.dir "${buildDir}/resources/main/tasks"
    outputs.dir "${buildDir}/resources/main/lib"
    outputs.dir "${buildDir}/resources/main/services"
    outputs.dir "${buildDir}/resources/main/site"
    outputs.dir "${buildDir}/resources/main/admin"
    outputs.file "${buildDir}/resources/main/main.js"
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'

    // serverWebpack.dependsOn += 'react4xp_components' // 'webpack_react4xp'
    serverWebpack.dependsOn += generateTypeScript {
      singleQuote = true
      prependText = "/* eslint-disable prettier/prettier */ \n // WARNING: This file was automatically generated by no.item.xp.codegen. You may lose your changes if you edit it."
    }

    dependsOn += npmInstall
    dependsOn += clientJsWebpack
    dependsOn += clientTsWebpack
    dependsOn += stylesWebpack
    dependsOn += serverWebpack
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

