import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id("com.github.node-gradle.node") version "7.0.2"
    id 'com.enonic.xp.app' version '3.4.0'
    id 'no.item.xp.codegen' version '2.3.0'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"}

dependencies {
    include "com.enonic.lib:lib-thymeleaf:2.1.0"
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-common:${xpVersion}"
    include "com.enonic.lib:lib-util:3.1.1"
    include "com.enonic.xp:lib-task:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.lib:lib-http-client:3.2.2"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.lib:lib-cron:1.1.2"
    include "com.enonic.xp:lib-context:${xpVersion}"
    include 'com.enonic.lib:lib-cache:2.2.0'
    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-repo:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.xp:lib-cluster:${xpVersion}"
    include "com.enonic.xp:lib-mail:${xpVersion}"
    include "com.enonic.xp:lib-scheduler:${xpVersion}"
    implementation 'commons-codec:commons-codec:1.16.0'
    include "no.item:wsutil-server:2.0.0"
    include "com.gravitondigital:featuretogglelib:0.3.0"
    include 'org.json:json:20231013'
    include "com.enonic.lib:lib-react4xp:4.0.2-B2"
    include 'com.enonic.lib:lib-text-encoding:2.1.1'
    include "com.enonic.xp:lib-value:${xpVersion}"
    include "no.item:lib-xp-cristin:1.3.1"
    include "no.item:lib-xp-time:1.0.3"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        url 'https://jitpack.io'
    }
}

node {
    download = true
    version = '18.12.1'
}

task compileAssets( type: NpmTask, dependsOn: npmInstall) {
  args = [
    'run',
    'build:asset' // This script must exist in the package.json file
  ]
  description 'Compile asset resources'
}


task compileServer( type: NpmTask, dependsOn: npmInstall) {
  args = [
    'run',
    'build:server' // This script must exist in the package.json file
  ]
  description 'Compile server resources'
}

task react4xp(type: NpmTask, dependsOn: npmInstall) {
  args = [
    'run',
    'compile:react4xp' // This script must exist in the package.json file
  ]
  description 'Compile React4xp resources'
  environment = [
    'R4X_APP_NAME': "${appName}",
    'R4X_BUILD_LOG_LEVEL': gradle.startParameter.logLevel.toString(),
    'R4X_DIR_PATH_ABSOLUTE_PROJECT': project.projectDir.toString(),
    'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
  ]
  group 'react4xp'
  // It also watches package.json and package-lock.json :)
  inputs.dir 'node_modules/@enonic/react4xp'
  inputs.dir 'src/main/resources'
  outputs.dir 'build/resources/main'
}
jar.dependsOn 'react4xp'

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude '**/*.test.js'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'

    compileServer.dependsOn += generateTypeScript {
      singleQuote = true
      prependText = "/* eslint-disable prettier/prettier */ \n // WARNING: This file was automatically generated by no.item.xp.codegen. You may lose your changes if you edit it."
    }

    dependsOn += npmInstall
    dependsOn += compileAssets
    dependsOn += compileServer
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}

