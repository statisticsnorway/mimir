buildEnv = development
verbose = false


# To add your own custom nashorn polyfills to the already-existing ones:
# make the a polyfilling file and refer to it here (path/filename relative to this project's root):
#
# nashornPolyfillsSource = src/main/resources/extraNashornPolyfills.es6


# A minimal webpack config is included with react4xp, to build your react components and their dependencies: See node_modules/react4xp-build-components/webpack.config.js.
# To change this setup, or override or extend that webpack.configjs:
# make a custom file that default-exports EITHER a finished webpack-style config object, OR a function.
# The function should take an "env" and "config" argument:
#   - Env is the collection of "--env." CLI arguments, and
#   - Config is the default config from react4xp-build-components/webpack.config.js.
# Manipulate or replace the config object AND return it.
# Example file:
#             module.exports = function(env, config) {
#                 config.module.rules[0].test = /\.((tsx?)|(jsx?)|(es6))$/:
#                 return config;
#             };
# Finally, refer to that file here (path/filename relative to this project's root):
#
overrideComponentWebpack = webpack.config.react4xp.js


# Override the included clientside wrapper (included in lib-react4xp-runtime) - see the react4xp-runtime-client docs.
buildRuntimeClient = false

# Activates dependencies like react, react-dom, declared in the EXTERNALS config constant - see the react4xp-runtime-externals docs.
buildExternals = true

# File name for the built master config. Note that the runtime needs a copy of it in this location AND in the folder of the react4xp lib (a location predicted by the constants defined in the master config file itself). This is magically handled by the react4xp-buildconstants script package.
masterConfigFileName = build/react4xp_constants.json
overwriteConstantsFile = true
entryDirs = _entries
entryDir = _entries
